{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#netbox-network-canvas-plugin","title":"NetBox Network Canvas Plugin","text":"<p>\ud83d\ude80 Advanced Site-Based Network Topology Visualization for NetBox v0.1.5</p> <p>Transform your NetBox DCIM/IPAM data into beautiful, interactive network topology diagrams with hierarchical device layout, draggable site containers, and professional enterprise-ready styling.</p> <p></p>"},{"location":"#-quick-start","title":"\u26a1 Quick Start","text":"<ol> <li>Install: <code>pip install git+https://github.com/dashton956-alt/netbox-network-canvas-plugin</code></li> <li>Configure: Add to NetBox <code>PLUGINS</code> list in configuration</li> <li>Migrate: Run <code>python manage.py migrate netbox_network_canvas_plugin</code></li> <li>Access: Navigate to Plugins &gt; Network Canvas in NetBox</li> <li>Visualize: Create your first interactive topology canvas!</li> </ol>"},{"location":"#-key-features","title":"\ud83c\udfaf Key Features","text":""},{"location":"#-site-based-organization","title":"\ufffd\ufe0f Site-Based Organization","text":"<ul> <li>Smart Site Grouping: Devices automatically organized by NetBox sites</li> <li>Dynamic Sizing: Site containers resize based on device count</li> <li>Visual Boundaries: Clear site separation with rounded containers</li> <li>Device Count Badges: Quick overview of devices per site</li> </ul>"},{"location":"#-professional-visualization","title":"\ufffd Professional Visualization","text":"<ul> <li>Device Type Icons: Distinct visual representation for routers, switches, VMs, firewalls, APs</li> <li>Color-Coded Categories: Consistent color scheme across device types</li> <li>Grid-Based Layout: Intelligent device positioning within sites</li> <li>Interactive Controls: Zoom, pan, drag-to-position with smooth animations</li> </ul>"},{"location":"#-real-time-dashboard","title":"\ud83d\udcca Real-Time Dashboard","text":"<ul> <li>Live NetBox Data: Direct integration with your NetBox database</li> <li>Network Statistics: Device, site, and connection overview</li> <li>Performance Optimized: Efficient queries with configurable limits</li> <li>Responsive Design: Works on desktop, tablet, and mobile devices</li> </ul>"},{"location":"#-advanced-features","title":"\ud83d\udd27 Advanced Features","text":"<ul> <li>Canvas Management: Create, edit, and organize multiple topology views</li> <li>Search &amp; Filtering: Find and filter devices across your network</li> <li>RESTful API: Access topology data programmatically</li> <li>Demo Data Tools: Populate NetBox with sample data for testing</li> </ul>"},{"location":"#-compatibility--testing","title":"\ud83c\udff7\ufe0f Compatibility &amp; Testing","text":"NetBox Version Plugin Status Test Status v4.3.7 \u2705 Fully Supported \ud83e\uddea Thoroughly Tested v4.0.x - v4.3.6 \u26a0\ufe0f Limited Support \u274c Not Tested v3.x.x \u274c Not Supported \u274c Not Tested <p>\u26a0\ufe0f Important: This plugin is tested and verified with NetBox v4.3.7 only. While it may work with other versions, compatibility is not guaranteed for any version other than v4.3.7. Field mappings and data structures may vary between NetBox versions.</p>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>NetBox: v4.3.7 (recommended and tested)</li> <li>Python: 3.8 or higher</li> <li>Browser: Modern browser with JavaScript enabled (Chrome, Firefox, Safari, Edge)</li> <li>Database: PostgreSQL (NetBox requirement)</li> </ul>"},{"location":"#-installation","title":"\ud83d\udce6 Installation","text":""},{"location":"#method-1-netbox-docker-setup-recommended","title":"Method 1: NetBox Docker Setup (Recommended)","text":"<p>If you're using the official NetBox Docker setup, follow these steps:</p> <ol> <li>Add to Plugin Requirements</li> </ol> <p>Edit your <code>plugin_requirements.txt</code> file:    <pre><code>git+https://github.com/dashton956-alt/netbox-network-canvas-plugin\n</code></pre></p> <ol> <li>Enable in Configuration</li> </ol> <p>Add to your <code>/configuration/plugins.py</code>:    <pre><code>PLUGINS = [\n    'netbox_network_canvas_plugin',\n    # ... your other plugins\n]\n\nPLUGINS_CONFIG = {\n    \"netbox_network_canvas_plugin\": {\n        # Maximum devices per canvas (performance optimization)\n        'max_devices_per_canvas': 500,\n\n        # Enable caching for better performance\n        'cache_topology_data': True,\n    },\n}\n</code></pre></p> <ol> <li>Rebuild and Start <pre><code>docker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n</code></pre></li> </ol>"},{"location":"#method-2-standard-netbox-installation","title":"Method 2: Standard NetBox Installation","text":"<p>For traditional NetBox installations:</p> <ol> <li> <p>Install the Plugin <pre><code># Activate your NetBox virtual environment\nsource /opt/netbox/venv/bin/activate\n\n# Install from Git repository\npip install git+https://github.com/dashton956-alt/netbox-network-canvas-plugin\n\n# Or install from local development copy\npip install -e /path/to/netbox-network-canvas-plugin\n</code></pre></p> </li> <li> <p>Configure NetBox</p> </li> </ol> <p>Edit <code>/opt/netbox/netbox/netbox/configuration.py</code>:    <pre><code>PLUGINS = [\n    'netbox_network_canvas_plugin',\n]\n\nPLUGINS_CONFIG = {\n    \"netbox_network_canvas_plugin\": {\n        # Performance settings\n        'max_devices_per_canvas': 500,\n        'cache_topology_data': True,\n    },\n}\n</code></pre></p> <ol> <li> <p>Apply Database Migrations <pre><code>cd /opt/netbox\npython manage.py migrate netbox_network_canvas_plugin\npython manage.py collectstatic --no-input\n</code></pre></p> </li> <li> <p>Restart NetBox <pre><code>sudo systemctl restart netbox netbox-rq\n</code></pre></p> </li> </ol>"},{"location":"#-configuration-options","title":"\ud83d\udd27 Configuration Options","text":"<pre><code>PLUGINS_CONFIG = {\n    \"netbox_network_canvas_plugin\": {\n        # Maximum devices to display per canvas (prevents browser overload)\n        'max_devices_per_canvas': 500,\n\n        # Cache topology data for improved performance\n        'cache_topology_data': True,\n\n        # Enable debug logging (development only)\n        'debug_mode': False,\n    },\n}\n</code></pre>"},{"location":"#-verify-installation","title":"\u2705 Verify Installation","text":"<ol> <li>Check Plugin Menu: Look for \"Network Canvas\" in the NetBox navigation</li> <li>Access Dashboard: Navigate to Plugins &gt; Network Dashboard</li> <li>Check Logs: Verify no errors in NetBox logs during startup</li> </ol>"},{"location":"#-quick-usage-guide","title":"\ud83d\ude80 Quick Usage Guide","text":""},{"location":"#-getting-started-5-minutes","title":"\ud83c\udfaf Getting Started (5 Minutes)","text":"<ol> <li>Access the Plugin</li> <li>Navigate to Plugins &gt; Network Canvas in your NetBox interface</li> <li> <p>Or access Plugins &gt; Network Dashboard for the live visualization</p> </li> <li> <p>View Your Network</p> </li> <li>The dashboard automatically displays your current NetBox devices</li> <li>Devices are grouped by site with dynamic sizing</li> <li> <p>Hover over devices for detailed information</p> </li> <li> <p>Create a Custom Canvas (Optional)</p> </li> <li>Click \"Create Canvas\" to save specific topology views</li> <li>Give it a name and description for future reference</li> </ol>"},{"location":"#-interactive-features","title":"\ud83c\udfa8 Interactive Features","text":""},{"location":"#navigation--controls","title":"Navigation &amp; Controls","text":"<ul> <li>\ud83d\uddb1\ufe0f Mouse Wheel: Zoom in/out on the topology</li> <li>\ud83d\uddb1\ufe0f Click &amp; Drag: Pan around the visualization</li> <li>\ud83c\udfaf Fit Button: Auto-zoom to show all devices</li> <li>\ud83c\udff7\ufe0f Labels Toggle: Show/hide device names</li> </ul>"},{"location":"#device-information","title":"Device Information","text":"<ul> <li>\ud83d\udcca Hover Tooltips: Rich device details including:</li> <li>Device name, type, and role</li> <li>Site location and manufacturer</li> <li>Device status and interface count</li> <li>\ud83c\udfa8 Color Coding: Each device type has a distinct color:</li> <li>\ud83d\udd35 Switches: Blue tones</li> <li>\ud83d\udfe2 Routers: Green tones  </li> <li>\ud83d\udfe1 VMs: Yellow tones</li> <li>\ud83d\udd34 Firewalls: Red tones</li> <li>\ud83d\udfe3 Access Points: Purple tones</li> </ul>"},{"location":"#site-organization","title":"Site Organization","text":"<ul> <li>\ud83d\udce6 Site Containers: Devices grouped in rounded site boundaries</li> <li>\ud83d\udccf Dynamic Sizing: Site boxes scale with device count</li> <li>\ud83d\udd22 Device Badges: Corner indicators showing device count per site</li> <li>\ud83d\udcd0 Grid Layout: Devices arranged in organized grids within sites</li> </ul>"},{"location":"#-demo-data-for-testing","title":"\ud83d\udcca Demo Data for Testing","text":"<p>If you need sample data to test the plugin:</p> <pre><code># Navigate to your NetBox root directory\ncd /opt/netbox\n\n# Use the demo data script (included with plugin)\npython /path/to/netbox-network-canvas-plugin/populate_demo_data.py\n\n# Or create specific amounts of demo data\npython populate_demo_data.py --sites 3 --devices-per-site 8\n</code></pre> <p>The demo script creates: - \ud83c\udfe2 Sites: Multiple network sites - \ud83d\udda5\ufe0f Devices: Routers, switches, firewalls, APs - \ud83d\udcbe VMs: Virtual machines across sites - \ud83c\udf10 Networks: VLANs, IP prefixes, and addressing - \ud83d\udd0c Infrastructure: Racks, power, and connections</p>"},{"location":"#-dashboard-features","title":"\ud83d\udcf1 Dashboard Features","text":""},{"location":"#network-statistics-panel","title":"Network Statistics Panel","text":"<ul> <li>Device Overview: Total count by type and status</li> <li>Site Summary: Number of sites and device distribution</li> <li>Quick Actions: Direct links to NetBox sections</li> </ul>"},{"location":"#live-topology-view","title":"Live Topology View","text":"<ul> <li>Real-Time Data: Always shows current NetBox state</li> <li>Performance Optimized: Handles large networks efficiently</li> <li>Error Handling: Graceful fallbacks for missing data</li> <li>Mobile Responsive: Works on tablets and phones</li> </ul>"},{"location":"#-canvas-management","title":"\ud83c\udfaf Canvas Management","text":""},{"location":"#creating-canvases","title":"Creating Canvases","text":"<ol> <li>From Main Menu: Plugins &gt; Network Canvas &gt; Create Canvas</li> <li>From Dashboard: Click \"Create Canvas\" button</li> <li>Fill Details:</li> <li>Name: \"Main Campus Topology\"</li> <li>Description: \"Primary site network visualization\"</li> <li>Save: Canvas is ready for use</li> </ol>"},{"location":"#managing-canvases","title":"Managing Canvases","text":"<ul> <li>\ud83d\udccb List View: See all created canvases</li> <li>\u270f\ufe0f Edit: Modify canvas name and description</li> <li>\ud83d\uddd1\ufe0f Delete: Remove unwanted canvases</li> <li>\ud83d\udd0d Search: Find canvases by name or description</li> </ul>"},{"location":"#api-endpoints","title":"API Endpoints","text":"<p>The plugin provides REST API endpoints for integration:</p>"},{"location":"#topology-data-api","title":"Topology Data API","text":"<p><pre><code>GET /api/plugins/network-canvas/api/topology-data/\n</code></pre> Returns current NetBox topology data in JSON format.</p> <p>Parameters: - <code>site</code> - Filter by site ID - <code>device_type</code> - Filter by device type - <code>limit</code> - Maximum devices to return (default: 100, max: 500)</p> <p>Example Response: <pre><code>{\n    \"devices\": [...],\n    \"interfaces\": [...], \n    \"connections\": [...],\n    \"metadata\": {\n        \"total_devices\": 45,\n        \"generated_at\": \"2025-08-14T10:30:00Z\"\n    }\n}\n</code></pre></p>"},{"location":"#dashboard-api","title":"Dashboard API","text":"<p><pre><code>GET /api/plugins/network-canvas/dashboard/\n</code></pre> Provides dashboard data including network statistics.</p>"},{"location":"#development","title":"Development","text":""},{"location":"#local-development-setup","title":"Local Development Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/Dashton956-alt/netbox-network-canvas-plugin\ncd netbox-network-canvas-plugin\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# OR\nvenv\\Scripts\\activate     # Windows\n\n# Install dependencies\npip install -r requirements_dev.txt\n\n# Install plugin in development mode\npip install -e .\n\n# Run tests\npython -m pytest\n\n# Code formatting\nblack netbox_network_canvas_plugin/\nflake8 netbox_network_canvas_plugin/\n</code></pre>"},{"location":"#plugin-architecture","title":"Plugin Architecture","text":"<pre><code>netbox_network_canvas_plugin/\n\u251c\u2500\u2500 models.py              # Django models (NetworkTopologyCanvas)\n\u251c\u2500\u2500 views.py               # Django views and API endpoints  \n\u251c\u2500\u2500 forms.py               # Django forms for canvas management\n\u251c\u2500\u2500 tables.py              # Django tables for list views\n\u251c\u2500\u2500 filtersets.py          # Filtering and search functionality\n\u251c\u2500\u2500 urls.py                # URL routing configuration\n\u251c\u2500\u2500 navigation.py          # NetBox menu integration\n\u251c\u2500\u2500 templates/             # HTML templates\n\u2502   \u2514\u2500\u2500 netbox_network_canvas_plugin/\n\u2502       \u251c\u2500\u2500 dashboard_simple.html      # Main dashboard\n\u2502       \u251c\u2500\u2500 network-canvas.html        # Canvas detail view\n\u2502       \u2514\u2500\u2500 networktopologycanvas_list.html  # Canvas list\n\u251c\u2500\u2500 static/                # CSS/JavaScript assets\n\u2502   \u2514\u2500\u2500 netbox_network_canvas_plugin/\n\u2502       \u2514\u2500\u2500 topology.css               # Professional styling\n\u251c\u2500\u2500 migrations/            # Database migrations\n\u2502   \u251c\u2500\u2500 0001_initial.py               # Initial model creation\n\u2502   \u2514\u2500\u2500 0002_update_model_structure.py # Model updates\n\u2514\u2500\u2500 __init__.py           # Plugin configuration\n</code></pre>"},{"location":"#key-components","title":"Key Components","text":"<ul> <li>Models: <code>NetworkTopologyCanvas</code> - Stores canvas configurations</li> <li>Views: Dashboard, API endpoints, CRUD operations  </li> <li>Templates: Responsive HTML with D3.js visualization</li> <li>Static Assets: Professional CSS with animations and responsive design</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#areas-for-contribution","title":"Areas for Contribution","text":"<ul> <li>Additional layout algorithms</li> <li>Enhanced VLAN visualization</li> <li>Performance optimizations  </li> <li>Mobile UI improvements</li> <li>Integration with network monitoring tools</li> <li>Export format extensions</li> </ul>"},{"location":"#-troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":""},{"location":"#common-issues--solutions","title":"Common Issues &amp; Solutions","text":""},{"location":"#-no-devices-found-in-dashboard","title":"\u274c \"No devices found\" in Dashboard","text":"<p>Symptoms: Empty topology view, no devices visible Solutions: <pre><code># 1. Verify NetBox has device data\npython manage.py shell\n&gt;&gt;&gt; from dcim.models import Device\n&gt;&gt;&gt; Device.objects.count()  # Should return &gt; 0\n\n# 2. Check device status (must be 'active')\n&gt;&gt;&gt; Device.objects.filter(status='active').count()\n\n# 3. Verify devices have sites assigned\n&gt;&gt;&gt; Device.objects.filter(site__isnull=False).count()\n</code></pre></p>"},{"location":"#-dashboard-loading-slowly","title":"\ud83d\udc0c Dashboard Loading Slowly","text":"<p>Symptoms: Page takes long time to load, browser becomes unresponsive Solutions: - Reduce Device Count: Use site filtering in topology view - Optimize Configuration:   <pre><code>PLUGINS_CONFIG = {\n    \"netbox_network_canvas_plugin\": {\n        'max_devices_per_canvas': 100,  # Reduce from 500\n        'cache_topology_data': True,\n    },\n}\n</code></pre> - Check Database Performance: Ensure NetBox database is optimized</p>"},{"location":"#-visualization-not-displaying","title":"\ud83d\udda5\ufe0f Visualization Not Displaying","text":"<p>Symptoms: Blank canvas area, JavaScript errors in console Solutions: - Check Browser Console: Press F12 \u2192 Console tab for error details - Modern Browser Required: Chrome 80+, Firefox 75+, Safari 13+, Edge 80+ - JavaScript Enabled: Verify browser allows JavaScript - Clear Browser Cache: Force refresh with Ctrl+F5 (or Cmd+Shift+R on Mac)</p>"},{"location":"#-plugin-not-in-navigation-menu","title":"\ud83d\udcf1 Plugin Not in Navigation Menu","text":"<p>Symptoms: No \"Network Canvas\" option in NetBox menu Solutions: <pre><code># 1. Verify plugin is in configuration\ngrep -n \"netbox_network_canvas_plugin\" /opt/netbox/netbox/netbox/configuration.py\n\n# 2. Check plugin installation\npip show netbox-network-canvas-plugin\n\n# 3. Apply migrations\npython manage.py migrate netbox_network_canvas_plugin\n\n# 4. Collect static files\npython manage.py collectstatic --no-input\n\n# 5. Restart NetBox\nsudo systemctl restart netbox netbox-rq\n</code></pre></p>"},{"location":"#-json-serialization-errors","title":"\ud83d\udd27 JSON Serialization Errors","text":"<p>Symptoms: API errors, \"device.role has no attribute\" errors Cause: NetBox version compatibility issue Solution: Ensure you're using NetBox v4.3.7 (the only tested version)</p>"},{"location":"#-labels-not-visible","title":"\ud83c\udfa8 Labels Not Visible","text":"<p>Symptoms: Black boxes instead of device labels Solution: Plugin version 0.1.5+ includes this fix. Update to latest version: <pre><code>pip install --upgrade git+https://github.com/dashton956-alt/netbox-network-canvas-plugin\n</code></pre></p>"},{"location":"#-debug-mode","title":"\ud83d\udd0d Debug Mode","text":"<p>Enable detailed error logging:</p> <pre><code># In NetBox configuration.py\nDEBUG = True\n\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n        'file': {\n            'class': 'logging.FileHandler',\n            'filename': '/opt/netbox/netbox_canvas_debug.log',\n        },\n    },\n    'loggers': {\n        'netbox_network_canvas_plugin': {\n            'handlers': ['console', 'file'],\n            'level': 'DEBUG',\n            'propagate': False,\n        },\n    },\n}\n</code></pre>"},{"location":"#-performance-tips","title":"\ud83d\udcca Performance Tips","text":""},{"location":"#for-large-networks-500-devices","title":"For Large Networks (500+ devices)","text":"<ol> <li>Use Site Filtering: Focus on specific sites rather than all devices</li> <li>Reduce Canvas Limit: Lower <code>max_devices_per_canvas</code> setting</li> <li>Enable Caching: Set <code>cache_topology_data: True</code></li> <li>Browser Optimization: Use Chrome/Firefox for best performance</li> </ol>"},{"location":"#database-optimization","title":"Database Optimization","text":"<pre><code>-- Check NetBox database performance\nEXPLAIN ANALYZE SELECT * FROM dcim_device \nJOIN dcim_site ON dcim_device.site_id = dcim_site.id \nWHERE dcim_device.status = 'active';\n</code></pre>"},{"location":"#-getting-help","title":"\ud83c\udd98 Getting Help","text":"<ol> <li>Check Browser Console: F12 \u2192 Console for JavaScript errors</li> <li>Review NetBox Logs: Check <code>/opt/netbox/logs/</code> for Python errors  </li> <li>Verify Configuration: Ensure plugin is properly configured</li> <li>Test with Demo Data: Use included demo script to isolate issues</li> <li>GitHub Issues: Report bugs at project repository</li> </ol>"},{"location":"#-system-requirements-check","title":"\ud83d\udccb System Requirements Check","text":"<pre><code># Verify NetBox version\npython manage.py version\n\n# Check Python version  \npython --version\n\n# Verify plugin installation\npython manage.py shell\n&gt;&gt;&gt; import netbox_network_canvas_plugin\n&gt;&gt;&gt; print(\"Plugin loaded successfully\")\n\n# Check database connectivity\npython manage.py dbshell\n</code></pre>"},{"location":"#-known-limitations","title":"\u26a0\ufe0f Known Limitations","text":"<ul> <li>NetBox Version: Only tested with v4.3.7</li> <li>Browser Support: Requires modern JavaScript features</li> <li>Performance: Large networks (1000+ devices) may need optimization</li> <li>Mobile: Touch interactions limited on small screens</li> </ul>"},{"location":"#-roadmap--future-development","title":"\ud83d\ude80 Roadmap &amp; Future Development","text":""},{"location":"#version-015-current-development-","title":"Version 0.1.5 (Current Development) \u2705","text":"<ul> <li>[x] Site-Based Organization: Devices grouped by NetBox sites with visual boundaries</li> <li>[x] Dynamic Site Sizing: Automatic resizing based on device count</li> <li>[x] Enhanced Device Types: Support for routers, switches, VMs, firewalls, APs</li> <li>[x] NetBox v4.3.7 Compatibility: Complete field mapping and API fixes</li> <li>[x] Professional Styling: Clear labels, improved colors, responsive design</li> <li>[x] Grid-Based Layout: Intelligent device positioning within sites</li> </ul>"},{"location":"#version-020-planned---q4-2025","title":"Version 0.2.0 (Planned - Q4 2025)","text":"<ul> <li>[ ] Physical Cable Visualization: Real cable connections with termination mapping</li> <li>[ ] Enhanced Connection Display: Show interface-to-interface connections</li> <li>[ ] VLAN Overlay: Visual representation of VLAN assignments per device</li> <li>[ ] Advanced Filtering: Filter by device role, manufacturer, status</li> <li>[ ] Export Functionality: Save topology as PNG, SVG, or PDF</li> <li>[ ] Performance Improvements: Lazy loading for large networks</li> </ul>"},{"location":"#version-030-future---q1-2026","title":"Version 0.3.0 (Future - Q1 2026)","text":"<ul> <li>[ ] Multi-Site Connections: Visualize site-to-site links and WAN connections</li> <li>[ ] Layer 3 Routing: Routing table integration with path visualization</li> <li>[ ] Network Path Tracing: Click-to-trace network paths between devices</li> <li>[ ] Historical Views: Compare topology changes over time</li> <li>[ ] Advanced Layout Algorithms: Hierarchical, circular, and custom layouts</li> <li>[ ] Real-Time Updates: WebSocket integration for live network changes</li> </ul>"},{"location":"#version-100-future---q2-2026","title":"Version 1.0.0 (Future - Q2 2026)","text":"<ul> <li>[ ] Network Discovery Integration: LLDP/CDP-based topology discovery</li> <li>[ ] Monitoring Tool Integration: SNMP, Prometheus, Grafana connectivity</li> <li>[ ] Mobile App: Dedicated mobile application for topology viewing</li> <li>[ ] Advanced Analytics: Network metrics and topology analysis</li> <li>[ ] Multi-Tenancy: Tenant-aware topology views</li> <li>[ ] Custom Device Icons: Upload and manage custom device graphics</li> </ul>"},{"location":"#-research--experimental","title":"\ud83d\udd2c Research &amp; Experimental","text":"<ul> <li>AI-Powered Layout: Machine learning for optimal device positioning</li> <li>3D Visualization: Three-dimensional network topology views</li> <li>AR/VR Support: Augmented reality network visualization</li> <li>Network Simulation: What-if scenario planning and modeling</li> <li>Automated Documentation: Generate network diagrams and reports</li> </ul>"},{"location":"#-community-requests","title":"\ud83d\udcca Community Requests","text":"<p>Help us prioritize development! Submit feature requests via GitHub Issues</p> <p>Most Requested Features: 1. Cable/Connection Visualization (In Progress - v0.2.0) 2. VLAN Overlay Display (Planned - v0.2.0) 3. Export/Print Functionality (Planned - v0.2.0) 4. Custom Device Icons (Future - v1.0.0) 5. Real-Time Updates (Future - v0.3.0)</p>"},{"location":"#-contributing-to-development","title":"\ud83e\udd1d Contributing to Development","text":"<p>We welcome contributions in these areas:</p>"},{"location":"#code-contributions","title":"Code Contributions","text":"<ul> <li>Frontend: D3.js visualization improvements</li> <li>Backend: Django/NetBox API enhancements</li> <li>Testing: Unit tests and integration testing</li> <li>Documentation: User guides and API documentation</li> </ul>"},{"location":"#non-code-contributions","title":"Non-Code Contributions","text":"<ul> <li>Testing: Report bugs and compatibility issues</li> <li>Design: UI/UX improvements and mockups</li> <li>Documentation: Tutorials and best practices</li> <li>Community: Help other users in discussions</li> </ul>"},{"location":"#-development-metrics","title":"\ud83d\udcc8 Development Metrics","text":"<p>Version 0.1.5 Progress: - \u2705 15+ GitHub commits - \u2705 5 major features implemented - \u2705 NetBox v4.3.7 full compatibility - \u2705 Comprehensive demo data toolkit - \u2705 Professional UI overhaul</p> <p>Project Stats: - \ud83c\udfd7\ufe0f Architecture: Django plugin with D3.js frontend - \ud83e\uddea Testing: NetBox v4.3.7 verified - \ud83d\udcda Documentation: Comprehensive README and changelog - \ud83c\udf1f Features: Site organization, device types, dynamic layouts</p>"},{"location":"#-license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p> <p>Key Points: - \u2705 Free for commercial and personal use - \u2705 Modify and distribute freely - \u2705 No warranty or liability - \u2705 Attribution required</p>"},{"location":"#-credits--acknowledgments","title":"\ud83d\udc65 Credits &amp; Acknowledgments","text":""},{"location":"#-primary-developer","title":"\ud83d\ude80 Primary Developer","text":"<p>Daniel Ashton - Project Creator &amp; Lead Developer - GitHub: @dashton956-alt - Specialization: NetBox plugins, network visualization, Django development</p>"},{"location":"#-built-with","title":"\ud83d\udee0\ufe0f Built With","text":"<ul> <li>NetBox - Network documentation and DCIM platform by NetBox Labs</li> <li>Django - High-level Python web framework</li> <li>D3.js - Data-driven documents and visualization library</li> <li>Bootstrap - Frontend CSS framework</li> <li>FontAwesome - Icon library for device type representations</li> </ul>"},{"location":"#-learning-resources","title":"\ud83d\udcda Learning Resources","text":"<p>This plugin was developed using excellent NetBox community resources:</p> <ul> <li>NetBox Plugin Tutorial - Comprehensive plugin development guide</li> <li>NetBox Plugin Demo - Reference implementation</li> <li>Cookiecutter NetBox Plugin - Project template</li> </ul>"},{"location":"#-netbox-community","title":"\ud83c\udf1f NetBox Community","text":"<p>Special thanks to the NetBox community for: - Comprehensive documentation and examples - Active support forums and discussions - Open-source ecosystem and plugin architecture - Continuous platform improvements and stability</p>"},{"location":"#-development-tools","title":"\ud83d\udd27 Development Tools","text":"<ul> <li>Cookiecutter - Project template generation</li> <li>Python Packaging - setuptools, pip, and PyPI ecosystem</li> <li>Git/GitHub - Version control and collaboration platform</li> <li>VS Code - Development environment and debugging</li> </ul>"},{"location":"#-inspiration--references","title":"\ud83d\udcca Inspiration &amp; References","text":"<ul> <li>Network Topology Visualization best practices from D3.js community</li> <li>DCIM Platform Integration patterns from NetBox plugin ecosystem</li> <li>Modern Web UI Design principles for professional dashboards</li> <li>Network Engineering workflows and visualization requirements</li> </ul>"},{"location":"#-contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See CONTRIBUTING.md for guidelines.</p> <p>Areas for Contribution: - \ud83c\udfa8 Frontend: D3.js visualizations and UI improvements - \ud83d\udd27 Backend: Django views, API endpoints, and database optimization - \ud83e\uddea Testing: Unit tests, integration tests, and compatibility testing - \ud83d\udcd6 Documentation: User guides, API docs, and tutorials - \ud83d\udc1b Bug Reports: Issue identification and troubleshooting - \ud83d\udca1 Feature Requests: New functionality ideas and requirements</p>"},{"location":"#-support--community","title":"\ud83d\udcde Support &amp; Community","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>GitHub Discussions: Community support and Q&amp;A</li> <li>NetBox Slack: Join the NetBox community Slack workspace</li> <li>Documentation: Comprehensive guides in this README</li> </ul> <p>\u2b50 If this plugin helps you, please consider starring the repository!</p> <p>NetBox Network Canvas Plugin - Making network topology visualization accessible and beautiful.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#015-2025-09-04---site-based-hierarchical-topology","title":"0.1.5 (2025-09-04) - Site-Based Hierarchical Topology","text":""},{"location":"changelog/#-major-features-added","title":"\ud83d\ude80 Major Features Added","text":"<ul> <li>Site-Based Network Topology: Complete redesign with white site containers grouping devices by NetBox site</li> <li>Hierarchical Device Layout: North-to-south arrangement (Core \u2192 Distribution \u2192 Access layers)</li> <li>Draggable &amp; Resizable Sites: Interactive site containers with drag/drop and resize handles</li> <li>Local D3.js Integration: 279KB local D3.js v7 library with CDN fallback for reliability</li> <li>No Overlap Prevention: Intelligent 900x700px site spacing prevents container overlap</li> </ul>"},{"location":"changelog/#-visual-enhancements","title":"\ud83c\udfa8 Visual Enhancements","text":"<ul> <li>Light Grey Device Circles: Improved contrast with #e9ecef fill and #6c757d stroke</li> <li>Enhanced Device Spacing: 95px horizontal, 90px vertical spacing for hostname readability</li> <li>Professional Styling: NetBox blue background with white site containers and drop shadows</li> <li>Improved Typography: 12px device labels with white backgrounds and proper contrast</li> <li>Layer Labels: Clear hierarchy indicators for Core, Distribution, and Access layers</li> </ul>"},{"location":"changelog/#-technical-improvements","title":"\ud83d\udd27 Technical Improvements","text":"<ul> <li>Enhanced Topology Data Loading: Real NetBox sites and devices with comprehensive error handling</li> <li>Defensive Programming: Null/undefined protection for device properties and string operations</li> <li>Debug Logging: Console output for device distribution, site mapping, and category breakdown</li> <li>Fixed JavaScript Syntax: Resolved template variable injection and function scope issues</li> <li>Updated MANIFEST.in: Proper static file distribution including local D3.js library</li> </ul>"},{"location":"changelog/#-layout-specifications","title":"\ud83d\udcca Layout Specifications","text":"<ul> <li>Site Containers: Minimum 650x400px with 140px internal padding</li> <li>Device Circles: 28px radius with professional styling and hover effects</li> <li>Spacing Standards: 50px between hierarchy layers, 25px after layer labels</li> <li>Row Spacing: 90px vertical spacing between device rows for clear separation</li> <li>Grid Layout: 6 devices per row with automatic row wrapping</li> </ul>"},{"location":"changelog/#-bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed device overlapping with layer labels by adjusting positioning</li> <li>Resolved missing devices in sites through improved data filtering</li> <li>Corrected JavaScript syntax errors from template variable escaping</li> <li>Fixed site group selection using proper D3.js filtering methods</li> <li>Improved error handling for missing device properties and site assignments</li> </ul>"},{"location":"changelog/#014-2025-09-02---development-baseline","title":"0.1.4 (2025-09-02) - Development Baseline","text":""},{"location":"changelog/#-major-visualization-enhancements","title":"\ud83c\udfaf Major Visualization Enhancements","text":"<ul> <li>Site-Based Organization: Complete redesign with devices grouped by NetBox sites</li> <li>Dynamic Site Sizing: Site containers automatically resize based on device count</li> <li>Enhanced Device Types: Extended support for routers, switches, VMs, firewalls, and access points</li> <li>Professional Styling: Improved visual hierarchy with clear labels and device type icons</li> </ul>"},{"location":"changelog/#-technical-improvements_1","title":"\ud83d\udd27 Technical Improvements","text":"<ul> <li>NetBox v4.3.7 Compatibility: Fixed JSON serialization issues in topology data API</li> <li>Grid-Based Layout: Intelligent device positioning within site boundaries</li> <li>Label Clarity: White background labels with borders for improved readability</li> <li>Device Count Badges: Visual indicators showing device count per site</li> </ul>"},{"location":"changelog/#-user-interface","title":"\ud83c\udfa8 User Interface","text":"<ul> <li>Interactive Site Boundaries: Visual separation of network sites with rounded containers</li> <li>Color-Coded Device Types: Consistent color scheme for different device categories</li> <li>Responsive Design: Improved layout scaling for different screen sizes</li> <li>Enhanced Tooltips: Rich device information with hover interactions</li> </ul>"},{"location":"changelog/#-bug-fixes_1","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fixed device.role vs device.device_role field compatibility issues</li> <li>Resolved JSON parsing errors in topology data views</li> <li>Corrected site relationship handling for NetBox v4.3.7</li> <li>Fixed label visibility issues (replaced black boxes with clear labels)</li> </ul>"},{"location":"changelog/#014-2025-09-02","title":"0.1.4 (2025-09-02)","text":""},{"location":"changelog/#-demo-data-and-compatibility","title":"\ud83d\udcca Demo Data and Compatibility","text":"<ul> <li>Expanded populate_demo_data.py script with comprehensive NetBox objects</li> <li>Added support for VMs, circuits, IP addressing, VLANs, prefixes, and racks</li> <li>Added clear_netbox_data.py script for cleaning demo data</li> <li>Fixed compatibility issues with NetBox v4.3.7</li> <li>Created baseline working version with essential functionality</li> </ul>"},{"location":"changelog/#-infrastructure","title":"\ud83c\udfd7\ufe0f Infrastructure","text":"<ul> <li>Established Git workflow with feature branching</li> <li>Updated version management and package configuration</li> <li>Enhanced project documentation and setup instructions</li> </ul>"},{"location":"changelog/#010-2025-08-14","title":"0.1.0 (2025-08-14)","text":"<ul> <li>First release on PyPI.</li> <li>Initial NetBox plugin structure</li> <li>Basic network topology visualization</li> <li>Django integration and navigation setup</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's:</p> <ul> <li>Reporting a bug</li> <li>Discussing the current state of the code</li> <li>Submitting a fix</li> <li>Proposing new features</li> <li>Becoming a maintainer</li> </ul>"},{"location":"contributing/#general-tips-for-working-on-github","title":"General Tips for Working on GitHub","text":"<ul> <li>Register for a free GitHub account if you haven't already.</li> <li>You can use GitHub Markdown for formatting text and adding images.</li> <li>To help mitigate notification spam, please avoid \"bumping\" issues with no activity. (To vote an issue up or down, use a  or  reaction.)</li> <li>Please avoid pinging members with <code>@</code> unless they've previously expressed interest or involvement with that particular issue.</li> <li>Familiarize yourself with this list of discussion anti-patterns and make every effort to avoid them.</li> </ul>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/dashton956-alt/netbox-network-canvas-plugin/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>NetBox Network Canvas Plugin could always use more documentation, whether as part of the official NetBox Network Canvas Plugin docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/dashton956-alt/netbox-network-canvas-plugin/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>netbox-network-canvas-plugin</code> for local development.</p> <ol> <li>Fork the <code>netbox-network-canvas-plugin</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/netbox-network-canvas-plugin.git\n</code></pre> </li> <li> <p>Activate the NetBox virtual environment (see the NetBox documentation under Setting up a Development Environment):</p> <pre><code>$ source ~/.venv/netbox/bin/activate\n</code></pre> </li> <li> <p>Add the plugin to NetBox virtual environment in Develop mode (see Plugins Development):</p> <p>To ease development, it is recommended to go ahead and install the plugin at this point using setuptools' develop mode. This will create symbolic links within your Python environment to the plugin development directory. Call setup.py from the plugin's root directory with the develop argument (instead of install):</p> <pre><code>$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.8, 3.9, 3.10 and 3.11. Check    https://github.com/dashton956-alt/netbox-network-canvas-plugin/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md) and that all tests pass. Then in the github project go to <code>Releases</code> and create a new release with a new tag.  This will automatically upload the release to pypi:</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#netbox-network-canvas--features--code-review","title":"NetBox Network Canvas \u2014 Features &amp; Code Review","text":"<p>This document summarizes a short code review of the current plugin and lists prioritized features organized into: Needed (must-have), Good to have, and Future releases.</p>"},{"location":"features/#quick-code-review-high-level","title":"Quick code review (high-level)","text":"<ul> <li>Devices: device queries, site grouping, and device-type detection are implemented and functioning (type detection uses device role and model heuristics).</li> <li>Layout: site containers, dynamic sizing, and site drag/resize logic exist; recently updated to prevent overlap and to support hierarchy layout.</li> <li>Connections: robust cable/circuit detection logic exists, but there are compatibility gaps across NetBox versions (terminations sometimes expose interface IDs vs device IDs). Template currently logs skipped connections when source/target don't map to nodes.</li> <li>Demo script: <code>populate_demo_data.py</code> successfully creates sites/devices/VMS/VLANs/IPs; programmatic cable creation is fragile across NetBox versions and may require using the NetBox shell/API or explicit termination model fields.</li> <li>Templates &amp; static: D3-based visualization and CSS are well organized. A prior JS-in-CSS issue was fixed. Consider adding ARIA and accessibility improvements.</li> <li>Debugging: useful <code>debug_info</code> JSON is emitted; replace ad-hoc <code>print()</code> statements with <code>logging</code> so messages appear in NetBox logs consistently.</li> </ul> <p>Recommended quick fixes (low-risk): - Add <code>source_device_id</code>, <code>target_device_id</code>, <code>source_interface_id</code>, <code>target_interface_id</code> in the connections payload so the template can resolve endpoints reliably. - Add an <code>interface_map</code> (interface_id -&gt; device_id) to the topology JSON as a simple server-side helper. - Swap remaining <code>print()</code> usage for Python <code>logging</code>.</p>"},{"location":"features/#features-prioritized","title":"Features (prioritized)","text":""},{"location":"features/#needed-must-have--short-term","title":"Needed (must-have \u2014 short-term)","text":"<ul> <li>Reliable connection mapping across NetBox versions</li> <li>Include both interface and device IDs in connection objects</li> <li>Add server-side <code>interface_map</code> to resolve endpoints in template</li> <li>Re-enable and validate real NetBox connections rendering (no mocks)</li> <li>Ensure links are drawn after site backgrounds and have sufficient stroke/opacity</li> <li>Prevent site box overlap and support predictable initial positioning</li> <li>Improve spacing/grid algorithm and viewBox calculation</li> <li>Stable north\u2192south hierarchy layout per site (Core\u2192Distribution\u2192Access)</li> <li>Performance safeguards</li> <li>Respect <code>max_devices_per_canvas</code> and add server-side paging/caching</li> <li>Add optional topology caching (per plugin config)</li> <li>Tests and CI</li> <li>Unit test key view functions (device classification, connection extraction)</li> <li>Add smoke test to validate topology JSON schema</li> <li>Documentation sync</li> <li>Update README quick-start sections to reflect any config keys and demo script usage</li> <li>Document known NetBox version caveats and the recommended NetBox version</li> </ul>"},{"location":"features/#good-to-have-mid-term","title":"Good to have (mid-term)","text":"<ul> <li>Persistent canvas state</li> <li>Save user-adjusted site positions, device coordinates per canvas</li> <li>Export &amp; share options</li> <li>Export to PNG/SVG and shareable URL or downloadable JSON</li> <li>Advanced filters and layers</li> <li>Filter by device role, status, tag, tenant, VLAN, or custom attributes</li> <li>Toggle overlays: VLANs, subnets, circuits</li> <li>Improved tooltips &amp; metadata</li> <li>Show interface-level details on hover, link negotiation (speed, duplex)</li> <li>Link labels &amp; metrics</li> <li>Show link type, length, assigned VLANs, and bandwidth where available</li> <li>Better UX controls</li> <li>Snap-to-grid, align, distribute, keyboard shortcuts, undo/redo for layout</li> <li>REST API improvements</li> <li>Add endpoints to update/save layout, retrieve canvas thumbnails, and list canvases with metadata</li> <li>Accessibility &amp; mobile polish</li> <li>ARIA, keyboard navigation, and responsive layout improvements</li> </ul>"},{"location":"features/#future-releases-longer-term--nice-to-have","title":"Future releases (longer-term / nice-to-have)","text":"<ul> <li>Live telemetry &amp; flows</li> <li>Integrate with NetFlow/sFlow/streaming telemetry for dynamic link usage overlays</li> <li>Collaboration &amp; versioning</li> <li>Multi-user canvas editing, history, and snapshots</li> <li>Auto-layout engines</li> <li>Multiple auto-layout algorithms (hierarchical, force-directed, radial) selectable per canvas</li> <li>Topology simulation &amp; validation</li> <li>Simulate path failures, visualize redundant paths and single points of failure</li> <li>Plugin marketplace &amp; packaging</li> <li>Prepare stable packaging, compatibility matrix, and automated release process for multiple NetBox versions</li> <li>AI-assisted layout suggestions</li> <li>Recommend site/group placements and highlight misconfigurations using heuristics or ML</li> </ul>"},{"location":"features/#next-steps-recommended-immediate-actions","title":"Next steps (recommended immediate actions)","text":"<ol> <li>Implement the small server-side additions (interface-&gt;device map and explicit device/interface ids in connections payload). 2. Re-enable connections and run the dashboard to verify links draw correctly. 3. Add a small unit test that asserts topology JSON contains devices and connections keys and that connection endpoints map to device ids.</li> </ol> <p>If you want, I can implement the small server-side changes (payload additions + logging) and a unit test now and push them to your branch.</p>"}]}